<templateSet group="provider">
    <template name="blocbuilder"
              value="BlocBuilder&lt;$Subject$Bloc, $Subject$State&gt;(&#10;  builder: (context, state) {&#10;    return $Container$;&#10;  },&#10;)"
              description="BlocBuilder widget" toReformat="false" toShortenFQNames="true">
        <variable name="Subject" expression="" defaultValue="&quot;Subject&quot;" alwaysStopAt="true"/>
        <variable name="Container" expression="" defaultValue="&quot;Container()&quot;" alwaysStopAt="true"/>
        <context>
            <option name="FLUTTER" value="true"/>
        </context>
    </template>
    <template name="bloclistener"
              value="BlocListener&lt;$Subject$Bloc, $Subject$State&gt;(&#10;  listener: (context, state) {&#10;    // TODO: implement listener&#10;  },&#10;  child: $Container$,&#10;)"
              description="BlocListener widget" toReformat="false" toShortenFQNames="true">
        <variable name="Subject" expression="" defaultValue="&quot;Subject&quot;" alwaysStopAt="true"/>
        <variable name="Container" expression="" defaultValue="&quot;Container()&quot;" alwaysStopAt="true"/>
        <context>
            <option name="FLUTTER" value="true"/>
        </context>
    </template>

    <!--        CLASSES        -->
    <template name="bloc"
              value="class $Subject$Bloc extends Bloc&lt;$Subject$Event, $Subject$State&gt; {&#10;  $Subject$Bloc() : super($Subject$Initial());&#10;&#10;  @override&#10;  Stream&lt;$Subject$State&gt; mapEventToState($Subject$Event event) async* {&#10;    // TODO: implement mapEventToState&#10;  }&#10;}"
              description="bloc class" toReformat="true" toShortenFQNames="true">
        <variable name="Subject" expression="" defaultValue="&quot;Subject&quot;" alwaysStopAt="true"/>
        <context>
            <option name="FLUTTER" value="true"/>
        </context>
    </template>
    <template name="blocevent"
              value="class $Subject$$Noun$$Verb$ extends $Subject$Event {&#10;  const $Subject$$Noun$$Verb$();&#10;&#10;  &#10;&#10;  @override&#10;  List&lt;Object&gt; get props =&gt; [];&#10;}"
              description="bloc event class" toReformat="true" toShortenFQNames="true">
        <variable name="Subject" expression="" defaultValue="&quot;Subject&quot;" alwaysStopAt="true"/>
        <variable name="Noun" expression="" defaultValue="&quot;Noun&quot;" alwaysStopAt="true"/>
        <variable name="Verb" expression="" defaultValue="&quot;Verb&quot;" alwaysStopAt="true"/>
        <context>
            <option name="FLUTTER" value="true"/>
        </context>
    </template>
    <template name="blocstate"
              value="class $Subject$$Verb$State extends $Subject$State {&#10;  const $Subject$$Verb$State();&#10;&#10;  &#10;&#10;  @override&#10;  List&lt;Object&gt; get props =&gt; [];&#10;}"
              description="bloc state class" toReformat="true" toShortenFQNames="true">
        <variable name="Subject" expression="" defaultValue="&quot;Subject&quot;" alwaysStopAt="true"/>
        <variable name="Verb" expression="" defaultValue="&quot;Verb&quot;" alwaysStopAt="true"/>
        <context>
            <option name="FLUTTER" value="true"/>
        </context>
    </template>

    <!--        MISC        -->
    <template name="blocread" value="context.read&lt;$Subject$Bloc&gt;()" description="context.read()" toReformat="false"
              toShortenFQNames="true">
        <variable name="Subject" expression="" defaultValue="&quot;Subject&quot;" alwaysStopAt="true"/>
        <context>
            <option name="FLUTTER" value="true"/>
        </context>
    </template>
    <template name="blocrepoof" value="RepositoryProvider.of&lt;$Subject$Repository&gt;(context)"
              description="RepositoryProvider.of()" toReformat="false" toShortenFQNames="true">
        <variable name="Subject" expression="" defaultValue="&quot;Subject&quot;" alwaysStopAt="true"/>
        <context>
            <option name="FLUTTER" value="true"/>
        </context>
    </template>
    <template name="blocwatch" value="context.watch&lt;$Subject$Bloc&gt;()" description="context.watch()" toReformat="false"
              toShortenFQNames="true">
        <variable name="Subject" expression="" defaultValue="&quot;Subject&quot;" alwaysStopAt="true"/>
        <context>
            <option name="FLUTTER" value="true"/>
        </context>
    </template>
    <template name="blocof" value="BlocProvider.of&lt;$Subject$Bloc&gt;(context)" description="BlocProvider.of()"
              toReformat="false" toShortenFQNames="true">
        <variable name="Subject" expression="" defaultValue="&quot;Subject&quot;" alwaysStopAt="true"/>
        <context>
            <option name="FLUTTER" value="true"/>
        </context>
    </template>
    <template name="blocimportflutterbloc"
              value="import 'package:flutter_bloc/flutter_bloc.dart';"
              description="Import package:flutter_bloc" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="FLUTTER" value="true"/>
        </context>
    </template>

    <!--        FREEZED        -->
    <template name="blocfstate" value="const factory $CLASS_NAME$.$stateName$() = _$stateName$;"
              description="freezed sub state" toReformat="false" toShortenFQNames="true">
        <variable name="CLASS_NAME" expression="dartClassName()" defaultValue="&quot;&quot;" alwaysStopAt="false"/>
        <variable name="stateName" expression="" defaultValue="&quot;stateName&quot;" alwaysStopAt="true"/>
        <context>
            <option name="FLUTTER" value="true"/>
        </context>
    </template>
    <template name="blocfevent" value="const factory $CLASS_NAME$.$eventName$() = _$eventName$;"
              description="freezed sub event" toReformat="false" toShortenFQNames="true">
        <variable name="CLASS_NAME" expression="dartClassName()" defaultValue="&quot;&quot;" alwaysStopAt="false"/>
        <variable name="eventName" expression="" defaultValue="&quot;eventName&quot;" alwaysStopAt="true"/>
        <context>
            <option name="FLUTTER" value="true"/>
        </context>
    </template>

</templateSet>